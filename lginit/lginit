#!/bin/sh
# LGMOD version ver=
# Source code released under GPL License
# lginit/rcS for Saturn7 by mmm4m5m

# config values: empty or non-empty
LGI_MENU=1; # 1=enable "Press any key for shell"
LGI_CHROOT=''; #sdb1/lgmod_s7.sqf
LGI_OVERLAY=''
LGI_OVERLAY_ONCE=''
LGINIT=''; # ''=rcS; <not empty>=lg-init; LGMOD=lg-init and LGMOD
LGINIT_ONCE=''; # ''=rcS; <not empty>=lg-init; LGMOD=lg-init and LGMOD
USB=/tmp/lgmod/chrusb; CHR=/tmp/lgmod/chroot
MNT=/mnt/lg/user; BOOTMOD=$MNT/lgmod/boot

OUT=/dev/kmsg; [ -e $OUT ] || OUT=/dev/stdout
DIR=/mnt/lg/lginit
export PATH=/sbin:/usr/sbin:/bin:/usr/bin


. $DIR/lginit-lguser > $OUT 2>&1

if [ -f "$BOOTMOD" ]; then
	echo "lginit: Found $BOOTMOD" > $OUT; . "$BOOTMOD"
	[ -n "$LGI_OVERLAY_ONCE" ] && { LGI_OVERLAY="$LGI_OVERLAY_ONCE"; sed -ie '/^LGI_OVERLAY_ONCE=/d' "$BOOTMOD" > $OUT 2>&1; }
	[ -n "$LGINIT_ONCE" ] && { LGINIT="$LGINIT_ONCE"; sed -ie '/^LGINIT_ONCE=/d' "$BOOTMOD" > $OUT 2>&1; }
	[ -n "$LGI_OVERLAY_ONCE$LGINIT_ONCE" ] && sync > $OUT 2>&1
fi

[ "$LGI_MENU" = 1 ] || {
	echo 'lginit: Menu ("X" to disable menu): Press any key for shell ...'
	if read -n1 -t1 r; then
		[ "$r" = X ] && { mkdir -p "$MNT/lgmod"; echo 'LGI_MENU=0' >> "$BOOTMOD"; sync; }
		sh; fi; }


DEV="/dev/${LGI_CHROOT%%/*}"; SQF="$USB/${LGI_CHROOT#*/}"
if [ -n "$LGI_CHROOT" ] && [ -b "$DEV" ]; then
	. $DIR/lginit-tmpfs
	if mkdir -p "$USB" > $OUT 2>&1; then
		echo "lginit: trying $DEV $SQF ..." > $OUT
		. $DIR/lginit-usercall1 call_and_wait > $OUT 2>&1
		if mount -t vfat -o iocharset=utf8,shortname=mixed,noatime "$DEV" "$USB" > $OUT 2>&1 ||
			mount -t ntfs -o noatime "$DEV" "$USB" > $OUT 2>&1; then
			if [ -f "$SQF" ]; then
				if mkdir -p "$CHR" > $OUT 2>&1 &&
					mount -t squashfs "$SQF" "$CHR" > $OUT 2>&1 &&
					mount -o bind $DIR "$CHR$DIR" > $OUT 2>&1; then
					{ echo "lginit: chroot $SQF ..."; mount -o bind /tmp "$CHR/tmp"
					mount -o bind / "$CHR$CHR"; mount -o bind "$USB" "$CHR$USB"
					umount -f "$MNT"; } > $OUT 2>&1
					exec chroot "$CHR" sh $DIR/lginit-overlay "$LGI_OVERLAY" "$LGINIT" chroot
					{ echo "lginit: Error $?"
					umount "$CHR$USB" "$CHR$CHR" "$CHR/tmp"; } > $OUT 2>&1
				fi; { umount "$CHR$DIR"; umount "$CHR" && sleep 1 && rm -rf "$CHR"; } > $OUT 2>&1
			else echo "lginit: Error chroot $SQF" > $OUT
			fi; umount "$USB" > $OUT 2>&1
fi; fi; fi


. $DIR/lginit-overlay "$LGI_OVERLAY" "$LGINIT"

exec sh
exit 1
