#!/bin/sh
# Source code released under GPL License
# rcS for Saturn6/Saturn7 by mmm4m5m

mount_readwrite() {
	# ro dir $d to rw - using mini_fo or mount-bind
	local SRC=/tmp/lgmod/Root TFS=/tmp/lgmod/tmpfs d=$2 e msg="$1"
	touch $d/test-rw > /dev/null 2>&1 && return 0
	[ -d "$TFS$d" ] || mkdir -p "$TFS$d"

	[ -d /sys/module/mini_fo ] ||
		insmod /lib/modules/2.6.26/mini_fo.ko
	[ -d /sys/module/mini_fo ] &&
		mount -t mini_fo -o base="$d",sto="$TFS$d" "mini$d" "$d" && return 0

	e=1; [ ! -d $SRC ] && mkdir -p $SRC && mount -o bind / $SRC
	if [ "$d" = /dev ]; then cp -r "$SRC$d" "$TFS/" || e=2
	elif [ "$d" = /lib ]; then for i in "$d/"*; do
		if [ -h "$i" ]; then cp -a "$SRC$i" "$TFS$d/" || e=2
		else ln -s "$SRC$i" "$TFS$d/" || e=2; fi; done
	else e=3; fi
	[ $e = 1 ] && mount -o bind "$TFS$d" "$d" && return 0

	echo "$msg: Error($e): mount_readwrite $d failed"; return $e
}

load_modules() {
	# insmod or modprobe modules and dependents (mount file systems)
	local e msg="$1" mf m=$2

	[ -d /sys/module/$m ] && return 0; # ok for ext2/ext3/nfs/lockd
	if  [ $m = ext3 ];   then load_modules "$msg $m" jbd || return 1
	elif [ $m = nfs ];   then load_modules "$msg $m" lockd || return 1
	elif [ $m = lockd ]; then load_modules "$msg $m" sunrpc || return 1
	elif [ $m = vfat ] || [ $m = ntfs ] || [ $m = msdos ];  then return 0
	fi

	mf=/mnt/lg/user/modules/$m.ko; [ -f $mf ] && insmod $mf && return 0
	modprobe $m && return 0; # modules.dep is invalid or not found?
	mf=/lib/modules/2.6.26/$m.ko;  [ -f $mf ] && insmod $mf && return 0
	mf=/lib/modules/2.6.26/extroot/$m.ko; [ -f $mf ] && insmod $mf && return 0

	e=$?; echo "$msg: Error($e): load_modules $m failed"; return $e
}

wait_drives() {
	# wait RELEASE to finish mount /mnt/usb#/Drive#
	local msg="$1" k D n last done curr; echo "$msg: wait"
	for k in 1 2 3 4 5 6 7; do
		D=$(stat -c%D /mnt/usb1 /mnt/usb1/Drive1); n=$'\n'
		[ "${D%%$n*}" = "${D#*$n}" ] || break; sleep 3; done
	[ "${D%%$n*}" = "${D#*$n}" ] && { echo "$msg: wait - timeout"; return 1; }
	last=$'\0'; done=0
	while [ "$done" -lt 3 ]; do
		[ "$last" = $'\0' ] && sleep 2; curr=$(stat -c%D /mnt/usb?/Drive?)
		[ "$last" = "$curr" ] && done=$(( done+1 )) || { last="$curr"; done=0; }
	done
	echo "$msg: wait - done"
}


print_devices() {
	# output example: sda1:VENDOR:SERIAL:vid:pid
	local id dev i EXTDEVS='/sys/block/sd?/sd??'
	[ "`echo $EXTDEVS`" = "$EXTDEVS" ] && return 1
	for i in $EXTDEVS; do
		[ -d $i ] || continue; dev=${i##*/}; i="${i%/*}"
		id="`cat $i/device/vendor`"; id="`echo $id`";  id="$id:`cat $i/device/../../../../serial`"
		id="$id:`cat $i/device/../../../../idVendor`"; id="$id:`cat $i/device/../../../../idProduct`"
		echo "$dev:$id"
	done
}

device_by_id() {
	# input example: $1=ext2:1:VENDOR:SERIAL:vid:pid $2=1 $3=ext2
	# $2=1 - partition number: sda1 or sdb1; $3=ext2|ext3 (optional)
	# output example: sda
	local ID="$1" EXTDEV="$2" EXTYPE="$3" i id dev
	for i in /sys/block/sd?; do
		dev=${i##*/}; [ -d $i ] && [ -d "$i/$dev$EXTDEV" ] || continue
		id="`cat $i/device/vendor`"; id="`echo $id`";  id="$id:`cat $i/device/../../../../serial`"
		id="$id:`cat $i/device/../../../../idVendor`"; id="$id:`cat $i/device/../../../../idProduct`"
		[ "$ID" = "$EXTYPE:$EXTDEV:$id" ] && echo $dev && return 0
	done; return 1
}
