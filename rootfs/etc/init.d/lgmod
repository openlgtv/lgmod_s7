#!/bin/sh

# lgmod
CFG_DIR="/mnt/lg/user/lgmod"
MODULES_SH="$CFG_DIR/module.sh"
P_SH="$CFG_DIR/patch.sh"
S_SH="$CFG_DIR/auto_stop.sh"

do_boot() {
	# NOTE: '/mnt/lg/user' is available temporaly. Will be unmounted after 'boot'!

	# lgmod: . /etc/rc.d/rc.sysinit
	# Create script for modules loading if not exist (first boot)
	if [ ! -e $MODULES_SH ]; then
		echo "#!/bin/sh" > $MODULES_SH
		echo "# Core network modules" >> $MODULES_SH
		echo "insmod /modules/mii.ko" >> $MODULES_SH
		echo "insmod /modules/usbnet.ko" >> $MODULES_SH
		echo "# Pegasus network chipset module" >> $MODULES_SH
		echo "insmod /modules/pegasus.ko" >> $MODULES_SH
		echo "# Asix network chipset module" >> $MODULES_SH
		echo "insmod /modules/asix.ko" >> $MODULES_SH
		echo "# MCS7830 network chipset module" >> $MODULES_SH
		echo "insmod /modules/mcs7830.ko" >> $MODULES_SH
		echo "# DM9601 network chipset module" >> $MODULES_SH
		echo "insmod /modules/dm9601.ko" >> $MODULES_SH
		echo "" >> $MODULES_SH
		echo "# CDROM filesystem modules" >> $MODULES_SH
		echo "#insmod /modules/cdrom.ko" >> $MODULES_SH
		echo "#insmod /modules/isofs.ko" >> $MODULES_SH
		echo "#insmod /modules/sr_mod.ko" >> $MODULES_SH
		echo "# CIFS/Samba filesystem module with max buffer size 127Kbyte" >> $MODULES_SH
		echo "#insmod /modules/cifs.ko CIFSMaxBufSize=130048" >> $MODULES_SH
		echo "insmod /modules/cifs.ko" >> $MODULES_SH
		echo "# EXT2 filesystem module" >> $MODULES_SH
		echo "#insmod /modules/ext2.ko" >> $MODULES_SH
		echo "# Journaling layer for EXT3 filesystem" >> $MODULES_SH
		echo "#insmod /modules/jbd.ko" >> $MODULES_SH
		echo "# EXT3 filesystem module" >> $MODULES_SH
		echo "#insmod /modules/ext3.ko" >> $MODULES_SH
		echo "# NFS filesystem modules" >> $MODULES_SH
		echo "#insmod /modules/sunrpc.ko" >> $MODULES_SH
		echo "#insmod /modules/lockd.ko" >> $MODULES_SH
		echo "#insmod /modules/nfs.ko" >> $MODULES_SH
		echo "" >> $MODULES_SH
		echo "# USB2Serial and mini_fo modules" >> $MODULES_SH
		echo "#insmod /modules/usbserial.ko" >> $MODULES_SH
		echo "#insmod /modules/pl2303.ko" >> $MODULES_SH
		echo "#insmod /modules/mini_fo.ko" >> $MODULES_SH
		chmod +x $MODULES_SH
	fi

	# Load modules with modules script
	$MODULES_SH


	# lgmod: . /etc/rc.d/rc.local
	# Create default patch script
	if [ ! -e $P_SH ]; then
		echo "#!/bin/sh" > $P_SH
		echo "# Patch script is executed just before RELEASE is launched." >> $P_SH
		echo "# At that time you have no USB and no network" >> $P_SH
		echo "# This script is for patching memory (RELEASE) with " >> $P_SH
		echo "# commands like dd, cat, devmem, hexdump, etc..." >> $P_SH
		echo "" >> $P_SH
		echo "# Address at which LGAPP is mounted LGAPP_FS_ADDRESS=\`cat /proc/xipfs\`" >> $P_SH
		echo "" >> $P_SH
		echo "# RELEASE is a first file in LGAPP_FS and is aligned in kernel PAGE_SIZE=0x1000" >> $P_SH
		echo "# RELEASE_BASE_ADDRESS=\$((LGAPP_FS_ADDRESS+PAGE_SIZE))" >> $P_SH
		echo "" >> $P_SH
		echo "# So can patch RELEASE this way:" >> $P_SH
		echo "# 1. Read value to patch, for example country feature, you have to know its offset in RELEASE" >> $P_SH
		echo "#VALUE=\`devmem \$((RELEASE_BASE_ADDRESS+country_feature_offset)) 32\`" >> $P_SH
		echo "# 2. Patch value" >> $P_SH
		echo "#NEWVALUE=\$((VALUE|maskmodifier))" >> $P_SH
		echo "# 3. Write patched value" >> $P_SH
		echo "#devmem \$((RELEASE_BASE_ADDRESS+country_feature_offset)) 32 \$NEWVALUE" >> $P_SH
		chmod +x $P_SH
	fi
	# Launch patch script
	$P_SH

	if [ -e /mnt/lg/user/lgmod/debug ]; then
		rm /mnt/lg/user/lgmod/debug
		exit 13
	fi
}

do_shutdown() {
	# lgmod: /etc/init.d/rcS
	exec /bin/sh $S_SH
}

do_start() {
	if [ ! -h /mnt/lg/cmn_data/resolv.conf ]; then
		rm /mnt/lg/cmn_data/resolv.conf
		ln -s /tmp/resolv.conf /mnt/lg/cmn_data/
	fi

	# lgmod: /etc/init.d/rcS
	exec /etc/lgmod.sh
}

do_stop() {
	killall udhcpc
	killall ntpd
	killall telnetd
	killall tcpsvd
	killall djmount
	killall httpd
}

case "$1" in
	boot)
		do_boot
		;;
	shutdown)
		do_shutdown
		;;
	start)
		do_start
		;;
	stop)
		do_stop
		;;
	restart)
		do_stop
		do_start
		;;
	*)
		echo "Usage: $0 {boot|start|stop|restart}"
		exit 1
esac
