#!/bin/sh
# Source code released under GPL License
# OPENRELEASE by rtokarev is licensed under BSD License
# rcS for Saturn7 by mmm4m5m

# config values: empty or non-empty
CRAMFS=1; # 1=check cramfs magic
#MODE=OPENREL-TMUX-PIPE
#MODE=OPENREL-TMUX
#MODE=OPENRELEASE
MODE=OPENREL-DAEMON; # in bg
#MODE=TMUX-PIPE
#MODE=TMUX; # pty.ko; in bg
#MODE=LG
RELMOD=/mnt/lg/user/lgmod/release

[ -d /mnt/lg/lginit ] || CRAMFS=0; # S6

wait() {
	{
	sleep 5; r=$(pgrep -f '^/mnt/lg/lgapp/RELEASE' | wc -l)
	[ "$r" -lt 2 ] && { echo "release: $1 - not started ($r)"; return 1; }
	} > /dev/kmsg 2>&1
	. /etc/init.d/mount wait && {
		. /etc/init.d/mount start
		if [ -d /mnt/lg/lginit ]; then # not S6 = S7
			[ -f /etc/init.d/netcast ] && . /etc/init.d/netcast start
		fi
		} > /dev/kmsg 2>&1
}

RELCFG() {
	if [ -d /mnt/lg/lginit ]; then # not S6 = S7
		cfg=/mnt/lg/cmn_data/RELEASE.cfg; rdir=/mnt/lg/model; rcfg=$rdir/RELEASE.cfg
		[ -f "$cfg" ] || sed -e 's/^\(eDebugMode,\).*$/\1EVENT/' "$rcfg" > "$cfg"
		if [ "$1" = boot ]; then mount -o bind "$cfg" "$rcfg"
		else D=$(stat -c%D / $rdir $rcfg); n=$'\n'
			[ "${D%%$n*}" = "${D#*$n}" ] && mount -o bind "$cfg" "$rcfg"; fi
	fi

	#f=openrelease_keymap.cfg; cfg=/mnt/lg/cmn_data/$f; rdir=/etc/openrelease; rcfg=$rdir/$f
	#if [ -f "$cfg" ]; then
	#	if [ "$1" = boot ]; then mount -o bind "$cfg" "$rcfg"
	#	else D=$(stat -c%D / $rdir $rcfg); n=$'\n'
	#		[ "${D%%$n*}" = "${D#*$n}" ] && mount -o bind "$cfg" "$rcfg"; fi
	#fi

	#cfg=/mnt/lg/cmn_data/openrelease_keymap.cfg
	#if [ ! -f $cfg ]; then
	#	echo "release: Default ${cfg##*/} ..."
	#	cp -a /etc/openrelease/default-${cfg##*/} $cfg; sync
	#fi
}

PREPARE() {
	if [ -n "$Rtmux" ]; then
		if [ -f /sbin/modprobe ]; then
			modprobe /lib/modules/pty.ko ||
				{ MODE=OPENREL-DAEMON; Rtmux=''; }; # another bg <MODE> without tmux
		elif ! insmod /lib/modules/pty.ko; then
			lsmod | grep -q '^pty ' ||
				{ MODE=OPENREL-DAEMON; Rtmux=''; }; # another bg <MODE> without tmux
		fi
	elif [ -n "$Ropen" ]; then
		if [ -f /sbin/modprobe ]; then
			modprobe /lib/modules/pty.ko ||
				{ MODE=LG; Ropen=''; }; # another fg <MODE> without OPENRELEASE
		elif ! insmod /lib/modules/pty.ko; then
			lsmod | grep -q '^pty ' ||
				{ MODE=LG; Ropen=''; }; # another fg <MODE> without OPENRELEASE
		fi
	fi
	if [ -n "$Rtmux" ]; then
		. /etc/init.d/rcS-devrw ||
			{ MODE=OPENREL-DAEMON; Rtmux=''; }; # another bg <MODE> without tmux
	fi
}

CRAMFS() {
	if [ ! -f /mnt/lg/lgapp/RELEASE ]; then
		. /etc/init.d/rcS-lginit-cramfs "$CRAMFS"; # LG: mount cramfs
		# test/debug - skip if 'replace'
		[ "$1" != replace ] && [ -f /mnt/lg/lgapp/RELEASE ] &&
			. /etc/init.d/release-patch "$1"
	fi
}

START() {
	[ -n "$2" ] && MODE="$2"; [ -n "$3" ] && CRAMFS="$3"
	. /etc/init.d/rcS-release test "$MODE"; # Ropen; Rtmux
	RELCFG "$1"; PREPARE; CRAMFS "$1"
}

CONFIG() {
	[ -f "$RELMOD" ] && { echo "release: Found $RELMOD"; . "$RELMOD" "$@" || return $?; }
	START "$@"
}

boot() {
	[ -f "$RELMOD" ] || MODE=LG
	[ -f "$RELMOD" ] && { echo "release: Found $RELMOD" > /dev/kmsg; . "$RELMOD" "$@" || return $?; }
	{
	START "$@"
	} > /dev/kmsg 2>&1
	. /etc/init.d/rcS-release run "$MODE" || return $?; # LG: RELEASE
}

start() {
	pgrep -f '^/mnt/lg/lgapp/RELEASE' && { echo 'release: Already started'; return 1; }
	/etc/init.d/mount stop
	/etc/init.d/release-mount stop
	CONFIG "$@"
	/etc/init.d/release wait &
	. /etc/init.d/rcS-release run "$MODE" || return $?; # LG: RELEASE
}

replace() {
	if [ -d /mnt/lg/lginit ]; then # not S6 = S7
		[ -f /etc/init.d/netcast ] && /etc/init.d/netcast stop
	fi
	/etc/init.d/mount stop
	CONFIG "$@"
	. /etc/init.d/rcS-release run "$MODE" || return $?; # LG: RELEASE
}

case "$1" in
	wait)		wait "$@";;
	boot)		boot "$@";;
	start)		start "$@";;
	replace)	replace "$@";;
	*)			echo "Usage: $0 wait|start|replace [MODE] [CRAMFS]"; exit 1
esac
